require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/gps_devices", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # GpsDevice. As you add validations to GpsDevice, be sure to
  # adjust the attributes here as well.
  let(:user){ User.new(email: "test@example.com", password: "password", name: "test_user") }
  let(:valid_attributes) {
    {serial_id: "device_test"}
  }

  let(:invalid_attributes) {
    {}
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # GpsDevicesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  before do
    post user_registration_url, params: { user: { name: "odi", email: "odi3@example.com", password: "secret123", password_confirmation: "secret123" } }
    user_id = JSON.parse(response.body)["data"]["id"]
    post new_user_session_url, params: { user: {email: "odi3@example.com", password: "secret123" }}
    @user = User.find(user_id)
    @token = response.headers["authorization"]
  end

  describe "GET /index" do
    it "renders a successful response" do
      gps_device = GpsDevice.create! valid_attributes.merge(user: @user)
      get gps_devices_url, headers: { authorization: @token }, as: :json
      expect(response).to be_successful
      expect(JSON.parse(response.body)[0]).to include( { "serial_id" => gps_device.serial_id, "user_id" => @user.id } )
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      gps_device = GpsDevice.create! valid_attributes.merge(user: @user)
      get gps_device_url(gps_device), headers: { authorization: @token }, as: :json
      expect(JSON.parse(response.body)).to include({ "serial_id" => gps_device.serial_id, "user_id" => @user.id })
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new GpsDevice" do
        expect {
          post gps_devices_url,
               params: { gps_device: valid_attributes }, headers: { authorization: @token }, as: :json
        }.to change(GpsDevice, :count).by(1)
      end

      it "renders a JSON response with the new gps_device" do
        post gps_devices_url,
             params: { gps_device: valid_attributes }, headers: { authorization: @token }, as: :json
        expect(response).to have_http_status(:created)
        expect(JSON.parse(response.body)).to include({ "serial_id" => valid_attributes[:serial_id], "user_id" => @user.id })
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new GpsDevice" do
        expect {
          post gps_devices_url,
               params: { gps_device: invalid_attributes }, headers: { authorization: @token }, as: :json
        }.to change(GpsDevice, :count).by(0)
      end

      it "renders a JSON response with errors for the new gps_device" do
        post gps_devices_url,
             params: { gps_device: invalid_attributes }, headers: { authorization: @token }, as: :json
        expect(response).to have_http_status(:bad_request)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {serial_id: "device_test2"}
      }

      it "updates the requested gps_device" do
        gps_device = GpsDevice.create! valid_attributes.merge(user: @user)
        patch gps_device_url(gps_device),
              params: { gps_device: new_attributes }, headers: { authorization: @token }, as: :json
        gps_device.reload
        expect(gps_device.serial_id).to eq new_attributes[:serial_id]
      end

      it "renders a JSON response with the gps_device" do
        gps_device = GpsDevice.create! valid_attributes.merge(user: @user)
        patch gps_device_url(gps_device),
              params: { gps_device: new_attributes }, headers: { authorization: @token }, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested gps_device" do
      gps_device = GpsDevice.create! valid_attributes.merge({user: @user})
      expect {
        delete gps_device_url(gps_device), headers: { authorization: @token }, as: :json
      }.to change(GpsDevice, :count).by(-1)
    end
  end
end
