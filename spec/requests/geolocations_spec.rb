require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/geolocations", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Geolocation. As you add validations to Geolocation, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { latitude: "32.7831",
      longitude: "-96.8067",
      url: "google.com",
      ip: "142.250.114.100" }
  }

  let(:invalid_attributes) {
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # GeolocationsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  before do
    post user_registration_url, params: { user: { name: "odi", email: "odi3@example.com", password: "secret123", password_confirmation: "secret123" } }
    user_id = JSON.parse(response.body)["data"]["id"]
    post new_user_session_url, params: { user: { email: "odi3@example.com", password: "secret123" } }
    @user = User.find(user_id)
    @token = response.headers["authorization"]
  end

  describe "GET /index" do
    it "renders a successful response" do
      Geolocation.create! valid_attributes.merge(source: @user)
      get geolocations_url, headers: { authorization: @token }, as: :json
      expect(response).to be_successful
      expect(JSON.parse(response.body)[0]).to include( { "latitude" => "32.7831",
                                                        "longitude"=> "-96.8067",
                                                        "url"=> "google.com",
                                                        "ip"=> "142.250.114.100",
                                                        "source_type"=> "User", } )
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      geolocation = Geolocation.create! valid_attributes.merge(source: @user)
      get geolocation_url(geolocation), headers: { authorization: @token }, as: :json
      expect(response).to be_successful
      expect(JSON.parse(response.body)).to include( { "latitude" => "32.7831",
                                                        "longitude"=> "-96.8067",
                                                        "url"=> "google.com",
                                                        "ip"=> "142.250.114.100",
                                                        "source_type"=> "User", } )
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Geolocation" do
        expect {
          post geolocations_url, headers: { authorization: @token }, as: :json
        }.to change(Geolocation, :count).by(1)
        expect(JSON.parse(response.body)[0]).to include( { "source_type"=>"User", "source_id"=>@user.id } )
      end

      it "creates a new Geolocation with url" do
        post geolocations_url, params: { url: "google.com" }, headers: { authorization: @token }, as: :json
        JSON.parse(response.body).map { |geolocation|
          expect(geolocation).to include({ "url" => "google.com",  "source_type"=>"User", "source_id"=>@user.id  })
        }
      end

      it "creates a new Geolocation gps_device" do
        gps_device = GpsDevice.create!({ serial_id: "device_test", user: @user })
        expect {
          post gps_device_geolocations_url(gps_device),params: { serial_id: gps_device.serial_id }, headers: { authorization: @token }, as: :json
        }.to change(Geolocation, :count).by(1)
        expect(JSON.parse(response.body)[0]).to include( { "source_type"=>"GpsDevice", "source_id" => gps_device.id } )
      end

      it "renders a JSON response with the new geolocation" do
        post geolocations_url,
             params: { geolocation: valid_attributes }, headers: { authorization: @token }, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Geolocation" do
        expect {
          post geolocations_url,
               params: { geolocation: invalid_attributes }, as: :json
        }.to change(Geolocation, :count).by(0)
      end

      it "renders a JSON response with errors for the new geolocation" do
        post geolocations_url,
             params: { serial_id: 2684}, headers: { authorization: @token }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { url: "github.com" }
      }

      it "updates the requested geolocation" do
        geolocation = Geolocation.create! valid_attributes.merge(source: @user)
        patch geolocation_url(geolocation),
              params: { geolocation: new_attributes }, headers: { authorization: @token }, as: :json
        geolocation.reload
        expect(geolocation.url).to eq("github.com")
      end

      it "renders a JSON response with the geolocation" do
        geolocation = Geolocation.create! valid_attributes.merge(source: @user)
        patch geolocation_url(geolocation),
              params: { geolocation: new_attributes }, headers: { authorization: @token }, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested geolocation" do
      geolocation = Geolocation.create! valid_attributes.merge(source: @user)
      expect {
        delete geolocation_url(geolocation), headers: { authorization: @token }, as: :json
      }.to change(Geolocation, :count).by(-1)
    end
  end
end
